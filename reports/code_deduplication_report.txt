============================================================
代码查重检测报告
============================================================

函数重复定义 (148):
  - main: def main()
    demo_config_system.py:19
    demo_data_sync.py:295
    run.py:185
    run_explainer_api.py:65
    verify_sync_monitor.py:247
    docs\build_docs.py:201
    examples\sync_monitor_usage.py:382
    scripts\cleanup_temp_files.py:214
    scripts\clear_database.py:256
    scripts\code_deduplication_checker.py:254
    scripts\full_test_v1_1_6.py:413
    scripts\start_monitoring.py:89
    src\ai\prediction.py:447
    src\config\cli.py:277
    src\config\migration_guide.py:170
    src\monitoring\data_quality_scheduler.py:347
    src\ui\explainer_dashboard.py:30
    src\utils\migration_helper.py:436
  - __init__: def __init__(self)
    start_stage3.py:44
    config\stage3_config.py:257
    frontend\node_modules\flatted\python\flatted.py:20
    scripts\clear_database.py:39
    scripts\full_test_v1_1_6.py:50
    scripts\start_monitoring.py:38
    src\ai\training_pipeline.py:44
    src\ai\strategy\backtest_engine.py:146
    src\ai\strategy\factor_weight_engine.py:44
    src\ai\strategy\model_explainer.py:94
    src\ai\strategy\model_monitor.py:108
    src\ai\strategy\stock_scoring_engine.py:46
    src\ai\strategy\strategy_customizer.py:103
    src\api\auth.py:138
    src\api\cache.py:24
    src\api\dependencies.py:30
    src\compute\data_compression_archiver.py:46
    src\compute\factor_cache.py:29
    src\compute\factor_engine.py:35
    src\compute\factor_models.py:246
    src\compute\factor_registry_improved.py:21
    src\compute\factor_registry_improved.py:54
    src\compute\factor_registry_improved.py:98
    src\compute\incremental_calculator.py:50
    src\compute\parallel_factor_calculator.py:32
    src\compute\performance_monitor.py:45
    src\compute\processing.py:36
    src\compute\statistical_strategies.py:125
    src\compute\task_scheduler.py:92
    src\compute\task_scheduler.py:273
    src\config\compatibility.py:68
    src\config\config_validator.py:28
    src\config\diagnostics.py:70
    src\config\validators.py:41
    src\data\data_quality_monitor.py:57
    src\data\data_sync_scheduler.py:93
    src\data\enhanced_data_quality_validator.py:77
    src\data\factor_data_service.py:58
    src\data\incremental_update.py:72
    src\data\sync_manager.py:63
    src\data\timescale_optimizer.py:22
    src\database\connection.py:33
    src\monitoring\data_quality_scheduler.py:33
    src\monitoring\events.py:30
    src\monitoring\events.py:108
    src\monitoring\events.py:131
    src\monitoring\explainer_monitor.py:312
    src\monitoring\logger.py:137
    src\monitoring\performance.py:218
    src\monitoring\performance.py:352
    src\monitoring\sync_monitor_backup_20250805_114233.py:130
    src\monitoring\websocket.py:34
    src\monitoring\websocket.py:42
    src\monitoring\websocket.py:158
    src\monitoring\__init__.py:31
    src\services\database_service.py:25
    src\services\factor_service.py:24
    src\utils\gpu_utils.py:40
    src\utils\gpu_utils.py:82
    src\utils\performance_monitor.py:357
    src\utils\profiler.py:46
  - __init__: def __init__(self, project_root: str)
    scripts\cleanup_temp_files.py:24
    scripts\code_deduplication_checker.py:24
    src\config\migration_guide.py:20
  - __init__: def __init__(self, model_path: str)
    src\ai\prediction.py:37
    src\strategy\ai_model.py:329
  - __init__: def __init__(self, engine)
    src\ai\strategy\stage3_manager.py:44
    src\compute\calculation_monitor.py:77
    src\compute\feature_store_adapter.py:30
    src\compute\fundamental_factor_engine.py:451
    src\compute\incremental_calculator.py:168
    src\compute\incremental_calculator.py:313
    src\compute\incremental_calculator.py:459
    src\compute\quality.py:300
    src\compute\sentiment_factor_engine.py:446
    src\compute\technical_factor_engine.py:435
    src\database\init_v3.py:18
    src\features\factor_feature_store.py:83
    src\features\feature_store.py:22
  - __init__: def __init__(self, config: Optional[TechnicalFactorCalculationConfig])
    src\compute\abstract_factor_calculator.py:29
    src\compute\technical_factor_engine.py:34
    src\compute\technical_factor_engine.py:177
  - __init__: def __init__(self, engine, config: DataCompressionConfig)
    src\compute\data_compression_archiver.py:137
    src\compute\data_compression_archiver.py:390
    src\compute\data_compression_archiver.py:494
    src\compute\data_compression_archiver.py:618
  - __init__: def __init__(self, config_dir: Path)
    src\compute\factor_config_manager.py:100
    src\config\config_loader.py:17
  - __init__: def __init__(self, max_workers: int)
    src\compute\factor_scheduler.py:38
    src\data\data_sync_scheduler.py:441
  - __init__: def __init__(self, config_manager)
    src\config\hot_reload.py:53
    src\config\manager.py:41
  - __init__: def __init__(self, factor_data_service: Optional[FactorDataService])
    src\data\factor_adapters.py:17
    src\data\factor_adapters.py:46
    src\data\factor_adapters.py:68
  - __init__: def __init__(self, config: DataSourceConfig)
    src\data\sources\akshare_data_source.py:24
    src\data\sources\base_data_source.py:42
    src\data\sources\tushare_data_source.py:23
  - __init__: def __init__(self, db_path: str)
    src\monitoring\alerts.py:160
    src\monitoring\data_quality.py:118
    src\monitoring\performance.py:472
  - __init__: def __init__(self, config: NotificationConfig)
    src\monitoring\notifications.py:124
    src\monitoring\notifications.py:547
  - __init__: def __init__(self, engine: Engine)
    src\monitoring\repositories.py:42
    src\monitoring\repositories.py:171
  - __init__: def __init__(self, model: BaseEstimator, feature_names: List[str])
    src\strategy\permutation_explainer.py:23
    src\strategy\shap_explainer.py:26
    src\strategy\visualization.py:32
  - __init__: def __init__(self, validation_level: ValidationLevel)
    src\utils\data_validator.py:51
    src\utils\data_validator.py:408
  - __post_init__: def __post_init__(self)
    config\stage3_config.py:160
    config\stage3_config.py:250
    src\compute\factor_models_improved.py:118
    src\compute\factor_models_improved.py:172
    src\compute\factor_models_improved.py:228
    src\compute\improved_manual_calculation_trigger.py:120
    src\compute\parallel_config.py:29
    src\config\rollback.py:37
    src\config\schema.py:18
    src\data\incremental_update.py:60
    src\monitoring\alerts.py:65
    src\monitoring\alerts.py:90
    src\monitoring\collectors.py:57
    src\monitoring\data_quality.py:72
    src\monitoring\data_quality.py:94
    src\monitoring\data_quality.py:111
    src\monitoring\models.py:58
    src\monitoring\models.py:130
    src\monitoring\models.py:175
    src\monitoring\models.py:204
    src\monitoring\models.py:228
    src\monitoring\performance.py:34
    src\monitoring\sync_monitor_backup_20250805_114233.py:76
    src\monitoring\sync_monitor_backup_20250805_114233.py:106
  - to_dict: def to_dict(self)
    config\stage3_config.py:306
    src\compute\effectiveness_config.py:125
    src\compute\factor_models.py:68
    src\compute\factor_models.py:97
    src\compute\factor_models.py:143
    src\compute\factor_models_improved.py:73
    src\compute\factor_models_improved.py:91
    src\compute\factor_models_improved.py:140
    src\compute\factor_models_improved.py:195
    src\compute\factor_models_improved.py:281
    src\features\factor_feature_store.py:37
    src\features\factor_feature_store.py:65
    src\models\base.py:30
    src\monitoring\alerts.py:96
    src\monitoring\collectors.py:63
    src\monitoring\config.py:168
    src\monitoring\logger.py:44
    src\monitoring\models.py:65
    src\monitoring\models.py:137
    src\monitoring\models.py:186
    src\monitoring\models.py:209
    src\monitoring\models.py:243
    src\monitoring\performance.py:40
    src\monitoring\performance.py:59
    src\monitoring\sync_monitor_backup_20250805_114233.py:82
    src\monitoring\sync_monitor_backup_20250805_114233.py:112
    src\utils\performance_monitor.py:41
  - validate: def validate(self)
    config\stage3_config.py:320
    src\compute\factor_models_improved.py:81
    src\compute\factor_models_improved.py:96
    src\compute\factor_models_improved.py:122
    src\compute\factor_models_improved.py:176
    src\compute\factor_models_improved.py:232
    src\compute\parallel_config.py:92
    src\config\unified_config.py:256
  - validate: def validate(self, request: CalculationRequest)
    src\compute\improved_manual_calculation_trigger.py:143
    src\compute\improved_manual_calculation_trigger.py:151
    src\compute\improved_manual_calculation_trigger.py:171
    src\compute\improved_manual_calculation_trigger.py:190
  - validate: def validate(self, config: Dict[str, Any])
    src\config\config_validator.py:36
    src\config\schema.py:29
  - generate_report: def generate_report(self)
    scripts\cleanup_temp_files.py:200
    scripts\code_deduplication_checker.py:202
    src\monitoring\performance.py:324
  - calculate_factors: def calculate_factors(self, ts_code: str, start_date: Optional[date], end_date: Optional[date], factor_names: Optional[List[str]])
    src\compute\base_factor_engine.py:47
    src\compute\fundamental_factor_engine.py:616
    src\compute\sentiment_factor_engine.py:625
    src\compute\technical_factor_engine.py:596
  - load_model: def load_model(self, model_path: str)
    src\ai\training_pipeline.py:735
    src\strategy\ai_model.py:342
  - _ensure_tables_exist: def _ensure_tables_exist(self)
    src\ai\strategy\backtest_engine.py:153
    src\ai\strategy\factor_weight_engine.py:54
    src\ai\strategy\model_explainer.py:104
    src\ai\strategy\model_manager.py:60
    src\ai\strategy\model_monitor.py:131
    src\ai\strategy\prediction_service.py:105
    src\ai\strategy\stock_scoring_engine.py:56
    src\ai\strategy\strategy_customizer.py:113
  - _get_trading_dates: def _get_trading_dates(self, start_date: str, end_date: str)
    src\ai\strategy\backtest_engine.py:453
    src\data\incremental_update.py:135
  - _create_tables: def _create_tables(self)
    src\ai\strategy\deployment_manager.py:130
    src\ai\strategy\doc_generator.py:97
    src\ai\strategy\system_optimizer.py:107
  - _init_default_configs: def _init_default_configs(self)
    src\ai\strategy\deployment_manager.py:254
    src\ai\strategy\system_optimizer.py:212
  - get_active_alerts: def get_active_alerts(self)
    src\ai\strategy\system_optimizer.py:1113
    src\compute\calculation_monitor.py:520
    src\monitoring\alerts.py:641
  - resolve_alert: def resolve_alert(self, alert_id: str)
    src\ai\strategy\model_monitor.py:975
    src\compute\calculation_monitor.py:525
    src\monitoring\alerts.py:629
  - clear_cache: def clear_cache(self)
    src\compute\abstract_factor_calculator.py:254
    src\compute\engine_factory.py:83
  - get_factor_data: def get_factor_data(self, factor_names: List[str], calculation_date: str, stock_list: Optional[List[str]])
    src\ai\strategy\stock_scoring_engine.py:112
    src\data\factor_adapters.py:71
  - get_factor_data: def get_factor_data(self, ts_code: str, factor_name: str, start_date: Optional[date], end_date: Optional[date])
    src\compute\factor_cache.py:396
    src\data\factor_adapters.py:49
  - get_factor_data: def get_factor_data(self, factor_name: str, version_id: str, ts_codes: List[str], start_date: date, end_date: date)
    src\data\factor_adapters.py:20
    src\features\factor_feature_store.py:361
  - normalize_factors: def normalize_factors(self, factor_data: pd.DataFrame, factor_names: List[str], method: str, industry_neutral: bool)
    src\ai\strategy\stock_scoring_engine.py:223
    src\data\factor_adapters.py:87
  - start_monitoring: def start_monitoring(self)
    src\ai\strategy\system_optimizer.py:314
    src\compute\calculation_monitor.py:154
    src\utils\performance_monitor.py:74
  - stop_monitoring: def stop_monitoring(self)
    src\ai\strategy\system_optimizer.py:325
    src\compute\calculation_monitor.py:166
    src\utils\performance_monitor.py:83
  - _monitoring_loop: def _monitoring_loop(self)
    src\ai\strategy\system_optimizer.py:332
    src\compute\calculation_monitor.py:179
  - verify_token: def verify_token(self, token: str)
    src\api\auth.py:255
    src\api\dependencies.py:35
  - get: def get(self, key: str)
    src\api\cache.py:50
    src\compute\factor_cache.py:102
    src\compute\factor_cache.py:248
    src\config\performance_optimizations.py:19
  - get: def get(self, key_path: str, default: Any)
    src\config\manager.py:245
    src\config\unified_config.py:87
  - set: def set(self, key: str, value: Any, ttl: Optional[int])
    src\api\cache.py:62
    src\compute\factor_cache.py:120
    src\compute\factor_cache.py:270
  - delete: def delete(self, key: str)
    src\api\cache.py:74
    src\compute\factor_cache.py:146
    src\compute\factor_cache.py:292
  - decorator: def decorator(func: Callable)
    src\api\cache.py:102
    src\api\decorators.py:26
    src\api\decorators.py:51
    src\api\decorators.py:117
    src\compute\performance_decorators.py:281
    src\compute\performance_decorators.py:319
    src\compute\validation_decorators.py:27
    src\compute\validation_decorators.py:85
    src\compute\validation_decorators.py:135
    src\compute\validation_decorators.py:168
    src\config\error_handling.py:27
    src\config\performance_optimizations.py:45
    src\monitoring\decorators.py:30
    src\monitoring\decorators.py:62
    src\monitoring\decorators.py:93
    src\monitoring\decorators.py:119
    src\monitoring\decorators.py:160
    src\monitoring\decorators.py:195
  - decorator: def decorator(func)
    src\compute\factor_cache.py:592
    src\compute\factor_cache.py:623
    src\utils\performance_monitor.py:337
    src\utils\retry.py:7
  - from_config: def from_config(cls)
    src\api\config.py:43
    src\monitoring\notifications.py:81
  - get_task_scheduler: def get_task_scheduler()
    src\api\dependencies.py:94
    src\api\factor_management_api.py:104
  - validate_priority: def validate_priority(cls, v)
    src\api\factor_api.py:88
    src\api\factor_management_api.py:55
  - get_alert_engine: def get_alert_engine()
    src\api\main.py:169
    src\monitoring\api.py:37
  - calculate: def calculate(self, data: pd.DataFrame)
    src\compute\abstract_factor_calculator.py:39
    src\compute\base_factor_engine.py:152
    src\compute\statistical_strategies.py:20
    src\compute\statistical_strategies.py:45
    src\compute\statistical_strategies.py:91
    src\compute\technical_factor_engine.py:345
    src\compute\technical_factor_engine.py:403
  - calculate: def calculate(self, financial_data: pd.DataFrame)
    src\compute\fundamental_factor_engine.py:212
    src\compute\fundamental_factor_engine.py:352
    src\compute\fundamental_factor_engine.py:424
  - calculate: def calculate(self, market_data: pd.DataFrame)
    src\compute\sentiment_factor_engine.py:89
    src\compute\sentiment_factor_engine.py:205
    src\compute\sentiment_factor_engine.py:310
    src\compute\sentiment_factor_engine.py:422
  - _execute_calculation: def _execute_calculation(self, data: pd.DataFrame)
    src\compute\abstract_factor_calculator.py:129
    src\compute\sentiment_factor_engine.py:27
    src\compute\sentiment_factor_engine.py:122
    src\compute\sentiment_factor_engine.py:231
    src\compute\sentiment_factor_engine.py:340
    src\compute\technical_factor_engine.py:67
    src\compute\technical_factor_engine.py:201
  - _get_required_columns: def _get_required_columns(self)
    src\compute\abstract_factor_calculator.py:143
    src\compute\sentiment_factor_engine.py:31
    src\compute\sentiment_factor_engine.py:126
    src\compute\sentiment_factor_engine.py:235
    src\compute\sentiment_factor_engine.py:344
    src\compute\technical_factor_engine.py:44
    src\compute\technical_factor_engine.py:187
  - _get_minimum_data_length: def _get_minimum_data_length(self)
    src\compute\abstract_factor_calculator.py:152
    src\compute\technical_factor_engine.py:48
    src\compute\technical_factor_engine.py:191
  - _validate_specific_requirements: def _validate_specific_requirements(self, data: pd.DataFrame)
    src\compute\abstract_factor_calculator.py:161
    src\compute\technical_factor_engine.py:59
  - _postprocess_specific: def _postprocess_specific(self, results: Dict[str, pd.Series], data: pd.DataFrame)
    src\compute\abstract_factor_calculator.py:171
    src\compute\technical_factor_engine.py:228
  - _initialize_factors: def _initialize_factors(self)
    src\compute\base_factor_engine.py:42
    src\compute\fundamental_factor_engine.py:463
    src\compute\sentiment_factor_engine.py:464
    src\compute\technical_factor_engine.py:447
  - get_required_data: def get_required_data(self, ts_code: str, start_date: Optional[date], end_date: Optional[date])
    src\compute\base_factor_engine.py:67
    src\compute\fundamental_factor_engine.py:557
    src\compute\sentiment_factor_engine.py:582
    src\compute\technical_factor_engine.py:560
  - register_factor: def register_factor(self, metadata: FactorMetadata, config: Optional[FactorConfig])
    src\compute\base_factor_engine.py:84
    src\compute\factor_models.py:250
    src\compute\factor_registry_improved.py:104
  - get_factor_metadata: def get_factor_metadata(self, name: str)
    src\compute\base_factor_engine.py:92
    src\compute\factor_models.py:258
    src\compute\factor_registry_improved.py:113
  - get_factor_metadata: def get_factor_metadata(self, factor_name: str)
    src\data\factor_adapters.py:36
    src\features\factor_feature_store.py:437
  - get_factor_config: def get_factor_config(self, name: str)
    src\compute\base_factor_engine.py:96
    src\compute\factor_models.py:262
    src\compute\factor_registry_improved.py:117
  - list_factors: def list_factors(self, factor_type: Optional[FactorType])
    src\compute\factor_models.py:266
    src\compute\factor_registry_improved.py:37
  - validate_data: def validate_data(self, data: pd.DataFrame)
    src\compute\statistical_strategies.py:25
    src\compute\statistical_strategies.py:36
    src\compute\statistical_strategies.py:82
  - get_performance_summary: def get_performance_summary(self)
    src\compute\calculation_monitor.py:471
    src\compute\performance_monitor.py:93
  - __call__: def __call__(self, alert: Alert)
    src\compute\calculation_monitor.py:569
    src\compute\calculation_monitor.py:614
  - cleanup_old_data: def cleanup_old_data(self, days: int)
    src\monitoring\performance.py:554
    src\monitoring\performance.py:733
  - get_storage_statistics: def get_storage_statistics(self)
    src\compute\data_compression_archiver.py:446
    src\features\factor_feature_store.py:929
  - from_dict: def from_dict(cls, config_dict: Dict[str, Any])
    src\compute\effectiveness_config.py:121
    src\compute\parallel_config.py:88
  - from_dict: def from_dict(cls, data: Dict[str, Any])
    src\monitoring\models.py:79
    src\monitoring\models.py:148
  - _generate_key: def _generate_key(self, key: str)
    src\compute\factor_cache.py:68
    src\compute\factor_cache.py:210
  - clear: def clear(self)
    src\compute\factor_cache.py:155
    src\compute\performance_decorators.py:242
    src\config\performance_optimizations.py:35
  - get_stats: def get_stats(self)
    src\compute\factor_cache.py:162
    src\compute\performance_decorators.py:248
    src\monitoring\websocket.py:554
  - wrapper: def wrapper(self, ts_code: str)
    src\compute\factor_cache.py:594
    src\compute\factor_cache.py:625
  - wrapper: def wrapper()
    src\compute\performance_decorators.py:29
    src\compute\performance_decorators.py:63
    src\compute\performance_decorators.py:283
    src\compute\validation_decorators.py:29
    src\compute\validation_decorators.py:87
    src\compute\validation_decorators.py:137
    src\compute\validation_decorators.py:170
    src\config\error_handling.py:29
    src\config\performance_optimizations.py:47
    src\monitoring\decorators.py:32
    src\monitoring\decorators.py:64
    src\monitoring\decorators.py:95
    src\monitoring\decorators.py:123
    src\monitoring\decorators.py:162
    src\monitoring\performance.py:239
    src\strategy\model_explainer.py:734
    src\strategy\model_explainer.py:758
    src\utils\performance_monitor.py:339
    src\utils\retry.py:9
  - _load_config_file: def _load_config_file(self, file_path: Path)
    src\compute\factor_config_manager.py:128
    src\config\config_loader.py:42
  - update_progress: def update_progress(self, task_id: str, progress: float, records_processed: int, records_failed: int)
    src\monitoring\repositories.py:30
    src\monitoring\repositories.py:98
  - get_factors_by_category: def get_factors_by_category(self, category: FactorCategory)
    src\compute\factor_models.py:274
    src\compute\factor_registry_improved.py:45
  - __new__: def __new__(cls)
    src\compute\factor_registry_improved.py:91
    src\config\unified_config.py:26
    src\database\connection.py:28
    src\utils\config_loader.py:16
  - start: def start(self)
    src\compute\factor_scheduler.py:118
    src\monitoring\alerts.py:566
    src\monitoring\data_quality_scheduler.py:54
    src\monitoring\logger.py:199
    src\monitoring\performance.py:79
    src\monitoring\performance.py:590
  - stop: def stop(self)
    src\compute\factor_scheduler.py:130
    src\monitoring\alerts.py:576
    src\monitoring\data_quality_scheduler.py:77
    src\monitoring\logger.py:209
    src\monitoring\performance.py:89
    src\monitoring\performance.py:601
  - _scheduler_loop: def _scheduler_loop(self)
    src\compute\factor_scheduler.py:144
    src\compute\task_scheduler.py:514
  - get_task_status: def get_task_status(self, task_id: str)
    src\compute\factor_scheduler.py:266
    src\monitoring\sync_monitor_backup_20250805_114233.py:491
    src\monitoring\sync_monitor_refactored.py:277
    src\services\factor_service.py:217
  - _generate_algorithm_hash: def _generate_algorithm_hash(self, algorithm_code: str, parameters: Dict[str, Any])
    src\compute\feature_store_adapter.py:521
    src\features\factor_feature_store.py:748
  - williams_r: def williams_r(high: Union[pd.Series, np.ndarray], low: Union[pd.Series, np.ndarray], close: Union[pd.Series, np.ndarray], window: int)
    src\compute\indicators.py:166
    src\compute\indicators.py:296
  - execute: def execute(self, tasks: List[Any], max_workers: int)
    src\compute\parallel_strategies.py:17
    src\compute\parallel_strategies.py:33
    src\compute\parallel_strategies.py:50
  - get_optimal_workers: def get_optimal_workers(self, task_count: int)
    src\compute\parallel_strategies.py:22
    src\compute\parallel_strategies.py:40
    src\compute\parallel_strategies.py:57
  - reset_metrics: def reset_metrics(self)
    src\compute\performance_monitor.py:124
    src\monitoring\explainer_monitor.py:257
  - normalize_series: def normalize_series(series)
    src\compute\sentiment_factor_engine.py:175
    src\compute\sentiment_factor_engine.py:267
  - get_resource_usage: def get_resource_usage(self)
    src\compute\task_scheduler.py:251
    src\data\data_sync_scheduler.py:311
  - stop_scheduler: def stop_scheduler(self)
    src\compute\task_scheduler.py:588
    src\data\data_sync_scheduler.py:688
  - get_scheduler_status: def get_scheduler_status(self)
    src\compute\task_scheduler.py:620
    src\data\data_sync_scheduler.py:699
  - _flatten_config: def _flatten_config(self, config: Dict[str, Any], prefix: str)
    src\config\compatibility.py:400
    src\config\diagnostics.py:284
  - _setup_default_rules: def _setup_default_rules(self)
    src\config\config_validator.py:94
    src\config\validators.py:45
  - get_factor_params: def get_factor_params()
    src\config\unified_config.py:284
    src\config\__init__.py:272
  - validate_config: def validate_config(self)
    src\config\factor_config.py:235
    src\config\manager.py:326
  - rollback_to_timestamp: def rollback_to_timestamp(self, timestamp: datetime)
    src\config\hot_reload.py:384
    src\config\manager.py:338
  - _initialize: def _initialize(self)
    src\config\manager.py:91
    src\config\unified_config.py:32
  - has: def has(self, key_path: str)
    src\config\manager.py:298
    src\config\unified_config.py:215
    src\utils\config_loader.py:37
  - get_section: def get_section(self, section: str)
    src\config\manager.py:312
    src\config\unified_config.py:129
    src\utils\config_loader.py:25
  - __enter__: def __enter__(self)
    src\config\manager.py:439
    src\utils\logger.py:221
  - __exit__: def __exit__(self, exc_type, exc_val, exc_tb)
    src\config\manager.py:442
    src\utils\logger.py:224
  - merge_dict: def merge_dict(base: Dict, update: Dict)
    src\config\templates.py:500
    src\config\utils.py:56
  - get_training_params: def get_training_params()
    src\config\unified_config.py:289
    src\config\__init__.py:277
  - get_monitoring_params: def get_monitoring_params()
    src\config\unified_config.py:294
    src\config\__init__.py:282
  - get_database_params: def get_database_params()
    src\config\unified_config.py:299
    src\config\__init__.py:287
  - get_api_params: def get_api_params()
    src\config\unified_config.py:304
    src\config\__init__.py:292
  - reload: def reload(self)
    src\config\unified_config.py:173
    src\utils\config_loader.py:29
  - all_config: def all_config(self)
    src\config\unified_config.py:187
    src\utils\config_loader.py:42
  - validator: def validator(value: Any, path: str)
    src\config\validators.py:319
    src\config\validators.py:327
    src\config\validators.py:346
    src\config\validators.py:373
    src\config\validators.py:387
    src\config\validators.py:404
  - _get_trade_dates: def _get_trade_dates(self, start_date: str, end_date: str)
    src\data\data_quality_monitor.py:566
    src\strategy\ai_model.py:472
  - generate_performance_report: def generate_performance_report(self, output_file: str)
    src\data\timescale_optimizer.py:794
    src\utils\profiler.py:242
  - validate_connection: def validate_connection(self)
    src\data\sources\akshare_data_source.py:45
    src\data\sources\base_data_source.py:48
    src\data\sources\tushare_data_source.py:40
  - get_supported_data_types: def get_supported_data_types(self)
    src\data\sources\akshare_data_source.py:56
    src\data\sources\base_data_source.py:57
    src\data\sources\tushare_data_source.py:51
  - get_stock_basic: def get_stock_basic(self)
    src\data\sources\akshare_data_source.py:87
    src\data\sources\base_data_source.py:66
    src\data\sources\tushare_data_source.py:64
  - get_daily_data: def get_daily_data(self, ts_code: str, start_date: str, end_date: str)
    src\data\sources\akshare_data_source.py:143
    src\data\sources\base_data_source.py:75
    src\data\sources\tushare_data_source.py:94
  - get_trade_cal: def get_trade_cal(self, start_date: str, end_date: str)
    src\data\sources\akshare_data_source.py:206
    src\data\sources\base_data_source.py:90
    src\data\sources\tushare_data_source.py:137
  - get_index_data: def get_index_data(self, index_code: str, start_date: str, end_date: str)
    src\data\sources\akshare_data_source.py:246
    src\data\sources\base_data_source.py:116
    src\data\sources\tushare_data_source.py:225
  - normalize_data: def normalize_data(self, data: pd.DataFrame, data_type: DataType)
    src\data\sources\akshare_data_source.py:342
    src\data\sources\base_data_source.py:152
    src\data\sources\tushare_data_source.py:289
  - get_rate_limit_info: def get_rate_limit_info(self)
    src\data\sources\akshare_data_source.py:378
    src\data\sources\base_data_source.py:174
    src\data\sources\tushare_data_source.py:319
  - get_financial_data: def get_financial_data(self, ts_code: str, period: str)
    src\data\sources\base_data_source.py:103
    src\data\sources\tushare_data_source.py:165
  - get_industry_classification: def get_industry_classification(self)
    src\data\sources\base_data_source.py:130
    src\data\sources\tushare_data_source.py:255
  - get_db_engine: def get_db_engine()
    src\database\connection.py:123
    src\utils\db.py:31
  - __repr__: def __repr__(self)
    src\models\base.py:34
    src\models\factor_models.py:71
    src\models\factor_models.py:122
    src\models\factor_models.py:151
    src\models\financial_models.py:79
    src\models\financial_models.py:127
    src\models\stock_models.py:34
    src\models\stock_models.py:67
  - primary_key: def primary_key(self)
    src\models\factor_models.py:75
    src\models\factor_models.py:126
    src\models\financial_models.py:83
    src\models\financial_models.py:131
    src\models\stock_models.py:71
  - record_metric: def record_metric(self, name: str, value: float, timestamp: datetime)
    src\monitoring\alerts.py:119
    src\monitoring\alerts.py:457
  - _init_database: def _init_database(self)
    src\monitoring\alerts.py:165
    src\monitoring\data_quality.py:130
    src\monitoring\performance.py:477
  - send: def send(self, alert: Alert)
    src\monitoring\alerts.py:324
    src\monitoring\alerts.py:340
    src\monitoring\alerts.py:390
  - remove_rule: def remove_rule(self, rule_id: str)
    src\monitoring\alerts.py:443
    src\monitoring\data_quality.py:306
  - _is_suppressed: def _is_suppressed(self, alert: Alert)
    src\monitoring\alerts.py:548
    src\monitoring\logger.py:182
  - _worker: def _worker(self)
    src\monitoring\alerts.py:583
    src\monitoring\logger.py:216
  - _process_alert: def _process_alert(self, alert: Alert)
    src\monitoring\alerts.py:598
    src\monitoring\logger.py:231
  - handle_event: def handle_event(self, event: SyncEvent)
    src\monitoring\events.py:22
    src\monitoring\events.py:92
    src\monitoring\events.py:100
    src\monitoring\events.py:112
    src\monitoring\events.py:145
    src\monitoring\events.py:168
  - get_metrics: def get_metrics(self)
    src\monitoring\events.py:122
    src\monitoring\sync_monitor_refactored.py:303
  - send_alert: def send_alert(self, alert: Alert)
    src\monitoring\logger.py:112
    src\monitoring\logger.py:167
  - get_notification_type: def get_notification_type(self)
    src\monitoring\notifications.py:137
    src\monitoring\notifications.py:191
    src\monitoring\notifications.py:334
    src\monitoring\notifications.py:416
  - _monitor_loop: def _monitor_loop(self)
    src\monitoring\performance.py:96
    src\utils\performance_monitor.py:89
  - reset: def reset(self)
    src\monitoring\performance.py:318
    src\monitoring\performance.py:462
    src\utils\data_validator.py:55
  - save_task: def save_task(self, task_info: SyncTaskInfo)
    src\monitoring\repositories.py:22
    src\monitoring\repositories.py:45
  - get_task: def get_task(self, task_id: str)
    src\monitoring\repositories.py:26
    src\monitoring\repositories.py:79
  - start_task_monitoring: def start_task_monitoring(self, task_info: SyncTaskInfo)
    src\monitoring\sync_monitor_backup_20250805_114233.py:264
    src\monitoring\sync_monitor_refactored.py:83
  - get_active_tasks: def get_active_tasks(self)
    src\monitoring\sync_monitor_backup_20250805_114233.py:477
    src\monitoring\sync_monitor_refactored.py:272
  - get_real_time_dashboard: def get_real_time_dashboard(self)
    src\monitoring\sync_monitor_backup_20250805_114233.py:546
    src\monitoring\sync_monitor_refactored.py:289
  - determine_mode: def determine_mode(self, request_data: Dict[str, Any])
    src\services\factor_service.py:133
    src\services\factor_service.py:141
  - explain_prediction: def explain_prediction(self, X: pd.DataFrame, sample_idx: int)
    src\strategy\model_explainer.py:375
    src\strategy\shap_explainer.py:112
  - cleanup: def cleanup(self)
    src\utils\migration_helper.py:428
    src\utils\performance_monitor.py:325

类重复定义 (2):
  - DatabaseConfig (bases: [])
    config\stage3_config.py:165
    src\compute\effectiveness_config.py:93
  - DatabaseConfig (bases: [])
    config\stage3_config.py:165
    src\compute\effectiveness_config.py:93

导入语句重复 (53):
  - json (出现在 53 个文件中)
  - sys (出现在 34 个文件中)
  - os (出现在 61 个文件中)
  - time (出现在 38 个文件中)
  - from datetime import datetime, timedelta (出现在 50 个文件中)
  - subprocess (出现在 6 个文件中)
  - logging (出现在 70 个文件中)
  - from datetime import datetime (出现在 35 个文件中)
  - from loguru import logger (出现在 49 个文件中)
  - argparse (出现在 11 个文件中)
  - from pathlib import Path (出现在 33 个文件中)
  - asyncio (出现在 16 个文件中)
  - from typing import Dict, Any (出现在 6 个文件中)
  - uuid (出现在 11 个文件中)
  - from dataclasses import dataclass (出现在 17 个文件中)
  - re (出现在 9 个文件中)
  - shutil (出现在 7 个文件中)
  - from src.utils.db import get_db_engine (出现在 18 个文件中)
  - from sqlalchemy import text (出现在 16 个文件中)
  - pandas (出现在 74 个文件中)
  - hashlib (出现在 8 个文件中)
  - from utils.db import get_db_engine (出现在 9 个文件中)
  - from src.compute.factor_engine import FactorEngine (出现在 7 个文件中)
  - numpy (出现在 55 个文件中)
  - joblib (出现在 7 个文件中)
  - warnings (出现在 9 个文件中)
  - from utils.config_loader import config (出现在 6 个文件中)
  - from sqlalchemy import create_engine, text (出现在 13 个文件中)
  - from src.config.unified_config import config (出现在 28 个文件中)
  - pickle (出现在 8 个文件中)
  - from dataclasses import dataclass, asdict (出现在 18 个文件中)
  - matplotlib.pyplot (出现在 7 个文件中)
  - seaborn (出现在 7 个文件中)
  - from utils.db import get_db_manager (出现在 11 个文件中)
  - from model_manager import AIModelManager (出现在 6 个文件中)
  - yaml (出现在 12 个文件中)
  - from sqlalchemy.exc import SQLAlchemyError (出现在 8 个文件中)
  - threading (出现在 23 个文件中)
  - from typing import Dict, List, Optional, Any, Tuple (出现在 7 个文件中)
  - shap (出现在 6 个文件中)
  - redis (出现在 6 个文件中)
  - from datetime import date (出现在 6 个文件中)
  - psutil (出现在 11 个文件中)
  - from typing import Dict, List, Optional, Any (出现在 6 个文件中)
  - from src.utils.logger import get_logger (出现在 6 个文件中)
  - from typing import List, Dict, Any, Optional (出现在 9 个文件中)
  - from datetime import date, datetime (出现在 6 个文件中)
  - from enum import Enum (出现在 30 个文件中)
  - from datetime import date, datetime, timedelta (出现在 11 个文件中)
  - from abc import ABC, abstractmethod (出现在 12 个文件中)
  - from collections import defaultdict, deque (出现在 8 个文件中)
  - from dataclasses import dataclass, field (出现在 15 个文件中)
  - functools (出现在 7 个文件中)

代码块重复 (625):
  - 重复代码: #!/usr/bin/env python3...
    出现 113 次
  - 重复代码: diagnostics = create_config_diagnostics()...
    出现 4 次
  - 重复代码: checker = create_compatibility_checker()...
    出现 4 次
  - 重复代码: if __name__ == "__main__":...
    出现 36 次
  - 重复代码: # -*- coding: utf-8 -*-...
    出现 112 次
  - 重复代码: from datetime import datetime, timedelta...
    出现 50 次
  - 重复代码: sys.path.append(os.path.dirname(os.path.abspath(__...
    出现 4 次
  - 重复代码: end_date = datetime.now().strftime('%Y-%m-%d')...
    出现 9 次
  - 重复代码: except Exception as e:...
    出现 999 次
  - 重复代码: print("\n" + "=" * 60)...
    出现 4 次
  - 重复代码: if __name__ == '__main__':...
    出现 29 次
  - 重复代码: from datetime import datetime...
    出现 35 次
  - 重复代码: format='%(asctime)s - %(name)s - %(levelname)s - %...
    出现 4 次
  - 重复代码: result = subprocess.run(...
    出现 4 次
  - 重复代码: engine = get_db_engine()...
    出现 28 次
  - 重复代码: with engine.connect() as conn:...
    出现 10 次
  - 重复代码: conn.execute("SELECT 1")...
    出现 5 次
  - 重复代码: from loguru import logger...
    出现 49 次
  - 重复代码: start_date=start_date,...
    出现 38 次
  - 重复代码: start_time = datetime.now()...
    出现 24 次
  - 重复代码: all_children_ready = False...
    出现 6 次
  - 重复代码: from pathlib import Path...
    出现 33 次
  - 重复代码: logger = get_logger(__name__)...
    出现 8 次
  - 重复代码: async def health_check():...
    出现 6 次
  - 重复代码: args = parser.parse_args()...
    出现 11 次
  - 重复代码: except KeyboardInterrupt:...
    出现 8 次
  - 重复代码: from typing import Dict, Any...
    出现 6 次
  - 重复代码: logger = logging.getLogger(__name__)...
    出现 57 次
  - 重复代码: logger.error("数据库初始化失败")...
    出现 4 次
  - 重复代码: logger.error("第三阶段管理器初始化失败")...
    出现 6 次
  - 重复代码: logger.error(f"健康检查失败: {e}")...
    出现 4 次
  - 重复代码: if not await launcher.initialize_stage3_manager():...
    出现 5 次
  - 重复代码: mock_context_manager = Mock()...
    出现 4 次
  - 重复代码: mock_context_manager.__enter__ = Mock(return_value...
    出现 4 次
  - 重复代码: mock_context_manager.__exit__ = Mock(return_value=...
    出现 4 次
  - 重复代码: mock_engine.connect.return_value = mock_context_ma...
    出现 4 次
  - 重复代码: with patch('src.monitoring.sync_monitor.get_db_eng...
    出现 4 次
  - 重复代码: monitor = SyncMonitor()...
    出现 4 次
  - 重复代码: task_info = SyncTaskInfo(...
    出现 6 次
  - 重复代码: task_id="test_task_001",...
    出现 4 次
  - 重复代码: data_source="tushare",...
    出现 8 次
  - 重复代码: target_date="2024-01-01",...
    出现 6 次
  - 重复代码: status=SyncTaskStatus.PENDING,...
    出现 7 次
  - 重复代码: task_id=task_info.task_id,...
    出现 6 次
  - 重复代码: event_id=str(uuid.uuid4()),...
    出现 5 次
  - 重复代码: timestamp=datetime.now(),...
    出现 19 次
  - 重复代码: from dataclasses import dataclass...
    出现 17 次
  - 重复代码: def __post_init__(self):...
    出现 24 次
  - 重复代码: def to_dict(self) -> Dict[str, Any]:...
    出现 26 次
  - 重复代码: def validate(self) -> bool:...
    出现 8 次
  - 重复代码: if result.returncode == 0:...
    出现 4 次
  - 重复代码: sys.path.append(os.path.dirname(os.path.dirname(os...
    出现 7 次
  - 重复代码: sync_monitor.start_task_monitoring(task_info)...
    出现 4 次
  - 重复代码: sync_monitor.complete_task_monitoring(...
    出现 4 次
  - 重复代码: data_source="akshare",...
    出现 4 次
  - 重复代码: report.append("=" * 60)...
    出现 8 次
  - 重复代码: from src.utils.db import get_db_engine...
    出现 18 次
  - 重复代码: from sqlalchemy import text...
    出现 16 次
  - 重复代码: self.engine = get_db_engine()...
    出现 15 次
  - 重复代码: with self.engine.connect() as conn:...
    出现 250 次
  - 重复代码: from collections import defaultdict...
    出现 4 次
  - 重复代码: with open(file_path, 'r', encoding='utf-8') as f:...
    出现 8 次
  - 重复代码: from typing import List, Dict, Any...
    出现 5 次
  - 重复代码: start_date=self.start_date,...
    出现 4 次
  - 重复代码: result = job.apply_async()...
    出现 4 次
  - 重复代码: total_count = len(results)...
    出现 4 次
  - 重复代码: 'success_count': success_count,...
    出现 5 次
  - 重复代码: end_time = datetime.now()...
    出现 6 次
  - 重复代码: from utils.db import get_db_engine...
    出现 4 次
  - 重复代码: from src.compute.factor_engine import FactorEngine...
    出现 7 次
  - 重复代码: warnings.filterwarnings('ignore')...
    出现 8 次
  - 重复代码: sys.path.append(os.path.dirname(os.path.dirname(os...
    出现 9 次
  - 重复代码: from utils.config_loader import config...
    出现 6 次
  - 重复代码: self.db_manager = DatabaseManager()...
    出现 4 次
  - 重复代码: logger.error(f"加载模型失败: {e}")...
    出现 4 次
  - 重复代码: if trade_date is None:...
    出现 4 次
  - 重复代码: return pd.DataFrame()...
    出现 47 次
  - 重复代码: logger.error(f"获取因子数据失败: {e}")...
    出现 8 次
  - 重复代码: created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,...
    出现 23 次
  - 重复代码: 'generated_at': datetime.now().isoformat()...
    出现 5 次
  - 重复代码: return {'error': str(e)}...
    出现 13 次
  - 重复代码: from sqlalchemy import create_engine, text...
    出现 13 次
  - 重复代码: from sklearn.preprocessing import StandardScaler...
    出现 4 次
  - 重复代码: from src.config.unified_config import config...
    出现 28 次
  - 重复代码: from ..utils.db import get_db_engine...
    出现 4 次
  - 重复代码: factor_names: List[str],...
    出现 12 次
  - 重复代码: target_period: int = 5,...
    出现 4 次
  - 重复代码: self.end_time = datetime.now()...
    出现 4 次
  - 重复代码: scaler = StandardScaler()...
    出现 4 次
  - 重复代码: 'model_type': model_type,...
    出现 6 次
  - 重复代码: cursor = conn.cursor()...
    出现 4 次
  - 重复代码: id SERIAL PRIMARY KEY,...
    出现 30 次
  - 重复代码: created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP...
    出现 17 次
  - 重复代码: 'start_date': start_date,...
    出现 34 次
  - 重复代码: for factor in factor_names:...
    出现 10 次
  - 重复代码: if factor in df.columns:...
    出现 5 次
  - 重复代码: 'learning_rate': 0.1,...
    出现 4 次
  - 重复代码: if hasattr(model, 'feature_importances_'):...
    出现 5 次
  - 重复代码: stock_list: Optional[List[str]] = None,...
    出现 4 次
  - 重复代码: 'model_name': model_name,...
    出现 26 次
  - 重复代码: from typing import Dict, List, Optional, Any, Tupl...
    出现 5 次
  - 重复代码: from dataclasses import dataclass, asdict...
    出现 18 次
  - 重复代码: import matplotlib.pyplot as plt...
    出现 7 次
  - 重复代码: import seaborn as sns...
    出现 7 次
  - 重复代码: from ...utils.db import get_db_manager...
    出现 11 次
  - 重复代码: from .model_manager import AIModelManager...
    出现 6 次
  - 重复代码: from .stock_scoring_engine import StockScoringEngi...
    出现 4 次
  - 重复代码: created_at: Optional[datetime] = None...
    出现 13 次
  - 重复代码: self.engine = get_db_manager().engine...
    出现 11 次
  - 重复代码: self.model_manager = AIModelManager()...
    出现 5 次
  - 重复代码: self._ensure_tables_exist()...
    出现 8 次
  - 重复代码: def _ensure_tables_exist(self):...
    出现 8 次
  - 重复代码: create_tables_sql = """...
    出现 8 次
  - 重复代码: model_name VARCHAR(100) NOT NULL,...
    出现 15 次
  - 重复代码: model_version VARCHAR(20) NOT NULL,...
    出现 5 次
  - 重复代码: task_id VARCHAR(100) UNIQUE NOT NULL,...
    出现 4 次
  - 重复代码: model_version VARCHAR(20),...
    出现 5 次
  - 重复代码: stock_code VARCHAR(20) NOT NULL,...
    出现 5 次
  - 重复代码: conn.execute(text(create_tables_sql))...
    出现 8 次
  - 重复代码: stock_code=stock_code,...
    出现 9 次
  - 重复代码: FROM stock_daily_data...
    出现 4 次
  - 重复代码: df = pd.read_sql(query_sql, self.engine, params={...
    出现 4 次
  - 重复代码: logger.error(f"获取交易日历失败: {e}")...
    出现 5 次
  - 重复代码: result = conn.execute(text(query_sql), {...
    出现 13 次
  - 重复代码: config: BacktestConfig,...
    出现 4 次
  - 重复代码: trade_date=trade_date,...
    出现 4 次
  - 重复代码: WHERE stock_code = :stock_code...
    出现 5 次
  - 重复代码: 'stock_code': stock_code,...
    出现 6 次
  - 重复代码: row = result.fetchone()...
    出现 38 次
  - 重复代码: running_max = cumulative.expanding().max()...
    出现 4 次
  - 重复代码: created_at=datetime.now()...
    出现 23 次
  - 重复代码: buffer = io.BytesIO()...
    出现 8 次
  - 重复代码: plt.savefig(buffer, format='png', dpi=150, bbox_in...
    出现 8 次
  - 重复代码: image_base64 = base64.b64encode(buffer.getvalue())...
    出现 8 次
  - 重复代码: 'model_name': result.model_name,...
    出现 4 次
  - 重复代码: params['model_name'] = model_name...
    出现 6 次
  - 重复代码: ORDER BY created_at DESC...
    出现 14 次
  - 重复代码: results.append(result)...
    出现 7 次
  - 重复代码: for result in results:...
    出现 10 次
  - 重复代码: from typing import Dict, List, Any, Optional, Tupl...
    出现 5 次
  - 重复代码: from sqlalchemy.exc import SQLAlchemyError...
    出现 8 次
  - 重复代码: created_at: datetime = None...
    出现 6 次
  - 重复代码: self.metadata = MetaData()...
    出现 4 次
  - 重复代码: Column('id', Integer, primary_key=True, autoincrem...
    出现 18 次
  - 重复代码: Column('is_active', Boolean, default=True),...
    出现 7 次
  - 重复代码: Column('created_at', DateTime, default=datetime.no...
    出现 5 次
  - 重复代码: Column('updated_at', DateTime, default=datetime.no...
    出现 5 次
  - 重复代码: Column('created_at', DateTime, default=datetime.no...
    出现 9 次
  - 重复代码: self.metadata.create_all(self.engine)...
    出现 4 次
  - 重复代码: logger.error(f"创建数据库表失败: {e}")...
    出现 4 次
  - 重复代码: self.save_deployment_task(task)...
    出现 8 次
  - 重复代码: version_id=version_id,...
    出现 9 次
  - 重复代码: params['limit'] = limit...
    出现 8 次
  - 重复代码: result = conn.execute(text(query_sql), params)...
    出现 13 次
  - 重复代码: rows = result.fetchall()...
    出现 24 次
  - 重复代码: end_date = datetime.now()...
    出现 6 次
  - 重复代码: updated_at = :updated_at...
    出现 10 次
  - 重复代码: conn.execute(text(update_sql), {...
    出现 13 次
  - 重复代码: 'updated_at': datetime.now()...
    出现 13 次
  - 重复代码: conn.execute(text(insert_sql), {...
    出现 30 次
  - 重复代码: WHERE task_id = :task_id...
    出现 7 次
  - 重复代码: 'task_id': task.task_id,...
    出现 6 次
  - 重复代码: task.end_time = datetime.now()...
    出现 5 次
  - 重复代码: self._perform_deployment_health_check(task, config...
    出现 6 次
  - 重复代码: start_time = time.time()...
    出现 12 次
  - 重复代码: Column('description', Text, nullable=False),...
    出现 5 次
  - 重复代码: output_format='markdown'...
    出现 4 次
  - 重复代码: result = conn.execute(text("""...
    出现 28 次
  - 重复代码: description=description,...
    出现 12 次
  - 重复代码: 'project_name': 'AI策略系统',...
    出现 4 次
  - 重复代码: 'generated_at': datetime.now().strftime('%Y-%m-%d ...
    出现 4 次
  - 重复代码: jinja_template = Template(template.template_conten...
    出现 4 次
  - 重复代码: content = jinja_template.render(**template_vars)...
    出现 4 次
  - 重复代码: self._save_generated_document(...
    出现 4 次
  - 重复代码: with open(output_path, 'w', encoding='utf-8') as f...
    出现 7 次
  - 重复代码: WHERE table_name = :table_name...
    出现 4 次
  - 重复代码: 'template_id': template.template_id,...
    出现 4 次
  - 重复代码: 'template_name': template.template_name,...
    出现 4 次
  - 重复代码: result = conn.execute(text(query_sql))...
    出现 8 次
  - 重复代码: 生成时间: {{ generated_at }}...
    出现 4 次
  - 重复代码: count = result.scalar()...
    出现 4 次
  - 重复代码: from typing import Dict, List, Optional, Any, Tupl...
    出现 7 次
  - 重复代码: factor_name VARCHAR(100) NOT NULL,...
    出现 5 次
  - 重复代码: model = model_data['model']...
    出现 7 次
  - 重复代码: feature_columns = model_data['feature_columns']...
    出现 8 次
  - 重复代码: if isinstance(shap_values, list):...
    出现 8 次
  - 重复代码: shap_values = shap_values[0]...
    出现 8 次
  - 重复代码: calculation_date: 计算日期...
    出现 6 次
  - 重复代码: WHERE model_name = :model_name...
    出现 18 次
  - 重复代码: AND model_version = :model_version...
    出现 4 次
  - 重复代码: 'model_version': model_version,...
    出现 4 次
  - 重复代码: 'calculation_date': calculation_date...
    出现 4 次
  - 重复代码: 'factor_name': factor_name,...
    出现 15 次
  - 重复代码: 'calculation_date': calculation_date,...
    出现 4 次
  - 重复代码: model_name=model_name,...
    出现 28 次
  - 重复代码: model_version=model_version...
    出现 6 次
  - 重复代码: model_version=model_version,...
    出现 9 次
  - 重复代码: start_date = (datetime.now() - timedelta(days=days...
    出现 6 次
  - 重复代码: AND factor_name = :factor_name...
    出现 5 次
  - 重复代码: 'start_date': start_date...
    出现 6 次
  - 重复代码: WHERE is_active = true...
    出现 4 次
  - 重复代码: if 'scaler' in model_data and model_data['scaler']...
    出现 8 次
  - 重复代码: model_data = self._load_model_data(model_name, mod...
    出现 5 次
  - 重复代码: model_version: str = None,...
    出现 5 次
  - 重复代码: prediction_date = datetime.now().strftime('%Y-%m-%...
    出现 4 次
  - 重复代码: 'prediction_date': prediction_date...
    出现 5 次
  - 重复代码: feature_importances=feature_importances,...
    出现 4 次
  - 重复代码: visualization_data=visualization_data,...
    出现 4 次
  - 重复代码: perm_importance = permutation_importance(...
    出现 4 次
  - 重复代码: if model_version is None:...
    出现 4 次
  - 重复代码: fig, ax = plt.subplots(figsize=(10, 6))...
    出现 6 次
  - 重复代码: ax.set_xlabel('SHAP值')...
    出现 4 次
  - 重复代码: ax.axvline(x=0, color='black', linestyle='-', alph...
    出现 8 次
  - 重复代码: ax.text(value + (0.01 if value >= 0 else -0.01), i...
    出现 4 次
  - 重复代码: va='center', ha='left' if value >= 0 else 'right')...
    出现 4 次
  - 重复代码: fig, ax = plt.subplots(figsize=(12, 8))...
    出现 4 次
  - 重复代码: factor_names=factor_names,...
    出现 7 次
  - 重复代码: updated_at = CURRENT_TIMESTAMP...
    出现 7 次
  - 重复代码: from scipy import stats...
    出现 5 次
  - 重复代码: from .factor_weight_engine import FactorWeightEngi...
    出现 5 次
  - 重复代码: resolved_at: Optional[datetime] = None...
    出现 5 次
  - 重复代码: updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP...
    出现 9 次
  - 重复代码: execution_time = (datetime.now() - start_time).tot...
    出现 7 次
  - 重复代码: start_date = end_date - timedelta(days=days)...
    出现 4 次
  - 重复代码: result = conn.execute(text(query_sql), {'model_nam...
    出现 4 次
  - 重复代码: alerts.append(self._create_performance_alert(...
    出现 5 次
  - 重复代码: 'metric_name': metric_name,...
    出现 5 次
  - 重复代码: 'alert_id': alert.alert_id,...
    出现 4 次
  - 重复代码: 'start_time': start_time,...
    出现 5 次
  - 重复代码: logger.error(f"获取活跃告警失败: {e}")...
    出现 4 次
  - 重复代码: if not recommendations:...
    出现 4 次
  - 重复代码: return recommendations...
    出现 5 次
  - 重复代码: FROM model_performance_metrics...
    出现 6 次
  - 重复代码: where_clause = "WHERE model_name = :model_name"...
    出现 4 次
  - 重复代码: COUNT(*) as total_tasks,...
    出现 8 次
  - 重复代码: COUNT(CASE WHEN status = 'completed' THEN 1 END) a...
    出现 5 次
  - 重复代码: error_message: Optional[str] = None...
    出现 9 次
  - 重复代码: if self.cache_enabled:...
    出现 4 次
  - 重复代码: prediction_date=prediction_date,...
    出现 4 次
  - 重复代码: return BatchPredictionResult(...
    出现 4 次
  - 重复代码: request_id=request_id,...
    出现 6 次
  - 重复代码: if factor_data.empty:...
    出现 5 次
  - 重复代码: processing_time = (datetime.now() - start_time).to...
    出现 5 次
  - 重复代码: def __init__(self, engine=None):...
    出现 4 次
  - 重复代码: self.engine = engine or get_db_engine()...
    出现 5 次
  - 重复代码: self._error_count += 1...
    出现 5 次
  - 重复代码: 'timestamp': datetime.now(),...
    出现 4 次
  - 重复代码: 'last_check': datetime.now()...
    出现 10 次
  - 重复代码: calculation_date: str,...
    出现 8 次
  - 重复代码: stock_list: Optional[List[str]] = None) -> pd.Data...
    出现 4 次
  - 重复代码: from datetime import date...
    出现 6 次
  - 重复代码: calculation_date=calc_date,...
    出现 4 次
  - 重复代码: if method == 'zscore':...
    出现 5 次
  - 重复代码: if max_val > min_val:...
    出现 4 次
  - 重复代码: for factor_name in factor_names:...
    出现 6 次
  - 重复代码: return pd.DataFrame(data)...
    出现 9 次
  - 重复代码: recommendations.append({...
    出现 6 次
  - 重复代码: params['category'] = category...
    出现 4 次
  - 重复代码: from concurrent.futures import ThreadPoolExecutor,...
    出现 5 次
  - 重复代码: start_time: Optional[datetime] = None...
    出现 5 次
  - 重复代码: end_time: Optional[datetime] = None...
    出现 6 次
  - 重复代码: memory = psutil.virtual_memory()...
    出现 5 次
  - 重复代码: disk = psutil.disk_usage('/')...
    出现 4 次
  - 重复代码: alert = self._create_alert(...
    出现 6 次
  - 重复代码: task = OptimizationTask(...
    出现 4 次
  - 重复代码: 'priority': 'medium',...
    出现 5 次
  - 重复代码: 'timestamp': datetime.now().isoformat(),...
    出现 10 次
  - 重复代码: if self.redis_client:...
    出现 5 次
  - 重复代码: updated_at = EXCLUDED.updated_at...
    出现 4 次
  - 重复代码: 'created_at': datetime.now(),...
    出现 6 次
  - 重复代码: if not self.redis_client:...
    出现 7 次
  - 重复代码: WHERE schemaname = 'public'...
    出现 4 次
  - 重复代码: conn.execute(text("""...
    出现 36 次
  - 重复代码: cpu_percent = psutil.cpu_percent(interval=1)...
    出现 5 次
  - 重复代码: from typing import List, Optional, Dict, Any...
    出现 5 次
  - 重复代码: from pydantic import BaseModel, Field...
    出现 4 次
  - 重复代码: except HTTPException:...
    出现 14 次
  - 重复代码: model_name: str = Query(..., description="模型名称"),...
    出现 8 次
  - 重复代码: model_version: Optional[str] = Query(None, descrip...
    出现 5 次
  - 重复代码: factor_name=factor_name,...
    出现 19 次
  - 重复代码: "timestamp": datetime.now().isoformat(),...
    出现 4 次
  - 重复代码: raise HTTPException(status_code=500, detail=str(e)...
    出现 35 次
  - 重复代码: from typing import Dict, List, Optional, Any...
    出现 6 次
  - 重复代码: result = conn.execute(...
    出现 5 次
  - 重复代码: result = conn.execute("""...
    出现 4 次
  - 重复代码: from functools import wraps...
    出现 5 次
  - 重复代码: def decorator(func: Callable) -> Callable:...
    出现 18 次
  - 重复代码: async def wrapper(*args, **kwargs):...
    出现 4 次
  - 重复代码: timestamp=datetime.now()...
    出现 10 次
  - 重复代码: from typing import Dict, Any, Optional...
    出现 5 次
  - 重复代码: from src.utils.logger import get_logger...
    出现 6 次
  - 重复代码: model = load_model(request.model_path)...
    出现 4 次
  - 重复代码: explainer = ModelExplainer(model, request.feature_...
    出现 4 次
  - 重复代码: from typing import List, Dict, Any, Optional...
    出现 9 次
  - 重复代码: from datetime import date, datetime...
    出现 6 次
  - 重复代码: from pydantic import BaseModel, Field, validator...
    出现 4 次
  - 重复代码: from enum import Enum...
    出现 30 次
  - 重复代码: COMPLETED = "completed"...
    出现 4 次
  - 重复代码: ts_code: str = Field(..., description="股票代码")...
    出现 5 次
  - 重复代码: factor_names=request.factor_names,...
    出现 5 次
  - 重复代码: start_date=request.start_date,...
    出现 6 次
  - 重复代码: end_date=request.end_date,...
    出现 5 次
  - 重复代码: background_tasks: BackgroundTasks,...
    出现 9 次
  - 重复代码: user: dict = Depends(verify_token)...
    出现 4 次
  - 重复代码: background_tasks.add_task(...
    出现 13 次
  - 重复代码: "timestamp": datetime.now().isoformat()...
    出现 5 次
  - 重复代码: from datetime import date, datetime, timedelta...
    出现 11 次
  - 重复代码: factor_name: str = Field(..., description="因子名称")...
    出现 5 次
  - 重复代码: user: dict = Depends(verify_admin_token)...
    出现 16 次
  - 重复代码: 'factor_name': row.factor_name,...
    出现 5 次
  - 重复代码: conn.execute(insert_query, {...
    出现 4 次
  - 重复代码: WHERE factor_name = :factor_name...
    出现 4 次
  - 重复代码: scheduler = get_task_scheduler()...
    出现 4 次
  - 重复代码: feature_store=Depends(get_factor_feature_store)...
    出现 10 次
  - 重复代码: user=Depends(require_factor_read()),...
    出现 7 次
  - 重复代码: factor_engine = FactorEngine()...
    出现 4 次
  - 重复代码: result = conn.execute(text(query), params)...
    出现 9 次
  - 重复代码: ts_code: str = Path(..., description="股票代码"),...
    出现 4 次
  - 重复代码: params = {'ts_code': ts_code}...
    出现 4 次
  - 重复代码: query += " AND trade_date >= :start_date"...
    出现 4 次
  - 重复代码: params['start_date'] = start_date...
    出现 10 次
  - 重复代码: query += " AND trade_date <= :end_date"...
    出现 4 次
  - 重复代码: params['end_date'] = end_date...
    出现 10 次
  - 重复代码: monitor: ModelMonitor = Depends(get_model_monitor)...
    出现 4 次
  - 重复代码: current_user: dict = Depends(get_current_user)...
    出现 18 次
  - 重复代码: deployment_manager: DeploymentManager = Depends(ge...
    出现 5 次
  - 重复代码: target_version=target_version,...
    出现 6 次
  - 重复代码: environment=environment,...
    出现 4 次
  - 重复代码: from abc import ABC, abstractmethod...
    出现 12 次
  - 重复代码: def _execute_calculation(self, data: pd.DataFrame,...
    出现 7 次
  - 重复代码: def _get_required_columns(self) -> List[str]:...
    出现 7 次
  - 重复代码: from .factor_models import (...
    出现 5 次
  - 重复代码: def _initialize_factors(self):...
    出现 4 次
  - 重复代码: start_date: Optional[date] = None,...
    出现 14 次
  - 重复代码: end_date: Optional[date] = None,...
    出现 9 次
  - 重复代码: factor_names: Optional[List[str]] = None) -> Facto...
    出现 4 次
  - 重复代码: end_date: Optional[date] = None) -> pd.DataFrame:...
    出现 7 次
  - 重复代码: missing_columns = [col for col in required_columns...
    出现 5 次
  - 重复代码: calculation_date=datetime.now(),...
    出现 6 次
  - 重复代码: factor_type=self.factor_type,...
    出现 8 次
  - 重复代码: status=CalculationStatus.FAILED,...
    出现 9 次
  - 重复代码: from collections import defaultdict, deque...
    出现 8 次
  - 重复代码: metadata: Dict[str, Any] = None...
    出现 7 次
  - 重复代码: class PerformanceMetrics:...
    出现 4 次
  - 重复代码: def __init__(self, engine):...
    出现 9 次
  - 重复代码: current_time = datetime.now()...
    出现 4 次
  - 重复代码: FROM task_execution_log...
    出现 4 次
  - 重复代码: for row in result.fetchall():...
    出现 4 次
  - 重复代码: 'last_updated': datetime.now().isoformat()...
    出现 4 次
  - 重复代码: server.send_message(msg)...
    出现 4 次
  - 重复代码: from typing import List, Dict, Optional, Any, Tupl...
    出现 4 次
  - 重复代码: WHERE ts_code = :ts_code...
    出现 11 次
  - 重复代码: result = conn.execute(query, {...
    出现 6 次
  - 重复代码: if 'trade_date' in df.columns:...
    出现 5 次
  - 重复代码: 'timestamp': datetime.now().isoformat()...
    出现 14 次
  - 重复代码: from dataclasses import dataclass, field...
    出现 15 次
  - 重复代码: from sqlalchemy import create_engine...
    出现 5 次
  - 重复代码: raise ValueError(f"不支持的因子类型: {factor_type}")...
    出现 4 次
  - 重复代码: redis_key = self._generate_key(key)...
    出现 5 次
  - 重复代码: factor_names=[factor_name],...
    出现 4 次
  - 重复代码: if result is not None:...
    出现 4 次
  - 重复代码: if cached_result is not None:...
    出现 6 次
  - 重复代码: with open(config_path, 'r', encoding='utf-8') as f...
    出现 4 次
  - 重复代码: with open(file_path, 'w', encoding='utf-8') as f:...
    出现 5 次
  - 重复代码: start_date: Optional[str] = None,...
    出现 7 次
  - 重复代码: self.factor_name = factor_name...
    出现 4 次
  - 重复代码: super().__init__(message, factor_name)...
    出现 5 次
  - 重复代码: from datetime import datetime, date...
    出现 4 次
  - 重复代码: created_at: datetime = field(default_factory=datet...
    出现 5 次
  - 重复代码: 'factor_name': self.factor_name,...
    出现 5 次
  - 重复代码: **kwargs) -> FactorMetadata:...
    出现 4 次
  - 重复代码: return FactorMetadata(...
    出现 5 次
  - 重复代码: factor_type=FactorType.TECHNICAL,...
    出现 11 次
  - 重复代码: factor_type=FactorType.FUNDAMENTAL,...
    出现 5 次
  - 重复代码: factor_type=FactorType.SENTIMENT,...
    出现 5 次
  - 重复代码: if cls._instance is None:...
    出现 4 次
  - 重复代码: self.max_workers = max_workers...
    出现 4 次
  - 重复代码: self._running = False...
    出现 6 次
  - 重复代码: result = engine.calculate_factors(...
    出现 4 次
  - 重复代码: execution_time = time.time() - start_time...
    出现 6 次
  - 重复代码: ts_codes: List[str] = None, start_date: date = Non...
    出现 5 次
  - 重复代码: end_date: date = None) -> pd.DataFrame:...
    出现 5 次
  - 重复代码: merged = self._merge_market_financial_data(market_...
    出现 6 次
  - 重复代码: return pd.Series(dtype=float)...
    出现 6 次
  - 重复代码: metadata = create_factor_metadata(...
    出现 12 次
  - 重复代码: config = create_factor_config(name=name, parameter...
    出现 8 次
  - 重复代码: self.register_factor(metadata, config)...
    出现 12 次
  - 重复代码: calculation_date=start_time,...
    出现 4 次
  - 重复代码: from contextlib import contextmanager...
    出现 5 次
  - 重复代码: CANCELLED = "cancelled"...
    出现 4 次
  - 重复代码: def validate(self, request: CalculationRequest) ->...
    出现 4 次
  - 重复代码: if result.status == CalculationStatus.SUCCESS:...
    出现 4 次
  - 重复代码: 'factor_type': factor_type,...
    出现 4 次
  - 重复代码: AND trade_date BETWEEN :start_date AND :end_date...
    出现 4 次
  - 重复代码: for col in numeric_columns:...
    出现 8 次
  - 重复代码: if col in data.columns:...
    出现 8 次
  - 重复代码: data[col] = pd.to_numeric(data[col], errors='coerc...
    出现 4 次
  - 重复代码: 'created_time': datetime.now()...
    出现 4 次
  - 重复代码: batch_df = df.iloc[i:i + batch_size]...
    出现 4 次
  - 重复代码: for ts_code in ts_codes:...
    出现 9 次
  - 重复代码: calculation_stats['failed_calculations'] += 1...
    出现 4 次
  - 重复代码: if isinstance(data, np.ndarray):...
    出现 6 次
  - 重复代码: data = pd.Series(data)...
    出现 6 次
  - 重复代码: return pd.DataFrame({...
    出现 6 次
  - 重复代码: low: Union[pd.Series, np.ndarray],...
    出现 4 次
  - 重复代码: close: Union[pd.Series, np.ndarray],...
    出现 4 次
  - 重复代码: if isinstance(high, np.ndarray):...
    出现 4 次
  - 重复代码: high = pd.Series(high)...
    出现 4 次
  - 重复代码: if isinstance(low, np.ndarray):...
    出现 4 次
  - 重复代码: if isinstance(close, np.ndarray):...
    出现 4 次
  - 重复代码: close = pd.Series(close)...
    出现 4 次
  - 重复代码: test_data = pd.DataFrame({...
    出现 4 次
  - 重复代码: super().__init__(message, {...
    出现 6 次
  - 重复代码: memory_info = self.process.memory_info()...
    出现 4 次
  - 重复代码: self.resource_monitor = ResourceMonitor()...
    出现 4 次
  - 重复代码: cpu_count = os.cpu_count() or 1...
    出现 4 次
  - 重复代码: start_date=calculation_params.get('start_date'),...
    出现 4 次
  - 重复代码: end_date=calculation_params.get('end_date'),...
    出现 4 次
  - 重复代码: factor_names=calculation_params.get('factor_names'...
    出现 4 次
  - 重复代码: error_message=str(e),...
    出现 6 次
  - 重复代码: execution_time=timedelta(0),...
    出现 6 次
  - 重复代码: @functools.wraps(func)...
    出现 15 次
  - 重复代码: def wrapper(*args, **kwargs):...
    出现 19 次
  - 重复代码: result = func(*args, **kwargs)...
    出现 8 次
  - 重复代码: from src.utils.retry import idempotent_retry...
    出现 4 次
  - 重复代码: df = pd.read_sql_query(text(query), conn, params=p...
    出现 4 次
  - 重复代码: factor_df: pd.DataFrame,...
    出现 6 次
  - 重复代码: factor_columns: List[str],...
    出现 4 次
  - 重复代码: factor_df: 因子数据DataFrame...
    出现 5 次
  - 重复代码: for factor in factor_columns:...
    出现 4 次
  - 重复代码: if col in df.columns:...
    出现 4 次
  - 重复代码: return "\n".join(report)...
    出现 6 次
  - 重复代码: return self.calculate(data, **kwargs)...
    出现 4 次
  - 重复代码: return pd.Series(dtype=float, index=market_data.in...
    出现 16 次
  - 重复代码: def calculate(self, market_data: pd.DataFrame, **k...
    出现 4 次
  - 重复代码: if 'close' not in market_data.columns:...
    出现 4 次
  - 重复代码: config = create_factor_config(...
    出现 4 次
  - 重复代码: 'calculation_method': 'market_data_based',...
    出现 4 次
  - 重复代码: 'update_frequency': 'daily',...
    出现 4 次
  - 重复代码: index=market_data.index...
    出现 5 次
  - 重复代码: 'trade_date': trade_date,...
    出现 4 次
  - 重复代码: 'cpu_percent': cpu_percent,...
    出现 4 次
  - 重复代码: with self.queue_lock:...
    出现 8 次
  - 重复代码: self.task_queue.add_task(task_config, execution)...
    出现 4 次
  - 重复代码: if isinstance(data, pd.DataFrame):...
    出现 6 次
  - 重复代码: if 'close' in data.columns:...
    出现 6 次
  - 重复代码: close_prices = data['close']...
    出现 5 次
  - 重复代码: close_prices = data.iloc[:, 0]...
    出现 5 次
  - 重复代码: super().__init__(config)...
    出现 4 次
  - 重复代码: if factor_names is None or factor_name in factor_n...
    出现 7 次
  - 重复代码: return func(*args, **kwargs)...
    出现 10 次
  - 重复代码: return default_return_value or pd.DataFrame()...
    出现 4 次
  - 重复代码: config_manager = get_config_manager()...
    出现 7 次
  - 重复代码: for issue in report.issues:...
    出现 5 次
  - 重复代码: description: str = ""...
    出现 6 次
  - 重复代码: self.add_compatibility_rule(CompatibilityRule(...
    出现 9 次
  - 重复代码: introduced_version="1.0.0",...
    出现 4 次
  - 重复代码: removed_version="2.0.0",...
    出现 6 次
  - 重复代码: config_path=config_path,...
    出现 4 次
  - 重复代码: current_version=current_version,...
    出现 5 次
  - 重复代码: if isinstance(value, dict):...
    出现 4 次
  - 重复代码: "data_sync_params": {...
    出现 8 次
  - 重复代码: if isinstance(value, dict) and key in value:...
    出现 6 次
  - 重复代码: self.add_diagnostic_rule(...
    出现 8 次
  - 重复代码: level=DiagnosticLevel.ERROR,...
    出现 5 次
  - 重复代码: "auto_fix_available": True,...
    出现 5 次
  - 重复代码: self.add_impact_rule(ConfigImpactRule(...
    出现 12 次
  - 重复代码: impact_level=ChangeImpact.HIGH,...
    出现 4 次
  - 重复代码: restart_required=True,...
    出现 4 次
  - 重复代码: impact_level=ChangeImpact.LOW,...
    出现 6 次
  - 重复代码: restart_required=False,...
    出现 9 次
  - 重复代码: with self._config_lock:...
    出现 8 次
  - 重复代码: ConfigValidationRule(...
    出现 8 次
  - 重复代码: keys = key_path.split('.')...
    出现 7 次
  - 重复代码: tags: List[str] = None...
    出现 4 次
  - 重复代码: if self.tags is None:...
    出现 5 次
  - 重复代码: if self.metadata is None:...
    出现 6 次
  - 重复代码: "start_date": "20200101",...
    出现 5 次
  - 重复代码: "monitoring_params": {...
    出现 4 次
  - 重复代码: if self._config_manager:...
    出现 7 次
  - 重复代码: self._required_validator(),...
    出现 20 次
  - 重复代码: self._type_validator(int),...
    出现 16 次
  - 重复代码: self._type_validator((int, float)),...
    出现 7 次
  - 重复代码: def validator(value: Any, path: str) -> Validation...
    出现 6 次
  - 重复代码: return ValidationResult(is_valid, errors, [], path...
    出现 4 次
  - 重复代码: return ValidationResult(True, [], [], path, value)...
    出现 7 次
  - 重复代码: validator = create_config_validator()...
    出现 4 次
  - 重复代码: if not validation_result.is_valid:...
    出现 4 次
  - 重复代码: manager = get_config_manager()...
    出现 5 次
  - 重复代码: data_source=data_source,...
    出现 5 次
  - 重复代码: if data_type == 'daily':...
    出现 7 次
  - 重复代码: elif data_type == 'financial':...
    出现 6 次
  - 重复代码: self.lock = threading.Lock()...
    出现 5 次
  - 重复代码: self.is_running = False...
    出现 4 次
  - 重复代码: target_date=target_date,...
    出现 9 次
  - 重复代码: dependencies={f"stock_basic_{target_date}"},...
    出现 5 次
  - 重复代码: return await asyncio.get_event_loop().run_in_execu...
    出现 8 次
  - 重复代码: while self.is_running:...
    出现 5 次
  - 重复代码: status = EXCLUDED.status,...
    出现 4 次
  - 重复代码: issues.append(ValidationIssue(...
    出现 8 次
  - 重复代码: severity=rule.severity,...
    出现 7 次
  - 重复代码: ts_codes: List[str] = None,...
    出现 6 次
  - 重复代码: if self.created_at is None:...
    出现 4 次
  - 重复代码: self.created_at = datetime.now()...
    出现 4 次
  - 重复代码: with self.status_lock:...
    出现 5 次
  - 重复代码: 'error': error_message,...
    出现 9 次
  - 重复代码: from sqlalchemy.orm import Session...
    出现 4 次
  - 重复代码: self.repository.update_sync_status(sync_type, date...
    出现 4 次
  - 重复代码: self._rate_limit_check()...
    出现 7 次
  - 重复代码: from typing import Optional...
    出现 4 次
  - 重复代码: 'chunk_time_interval': '1 month',...
    出现 4 次
  - 重复代码: 'partition_column': 'ts_code'...
    出现 5 次
  - 重复代码: self._record_backup_status(...
    出现 9 次
  - 重复代码: backup_end_time=backup_end_time,...
    出现 4 次
  - 重复代码: 'backup_id': backup_id,...
    出现 8 次
  - 重复代码: error_message=error_message...
    出现 5 次
  - 重复代码: 'restore_id': restore_id,...
    出现 4 次
  - 重复代码: start_date: 开始日期 (YYYY-MM-DD)...
    出现 4 次
  - 重复代码: end_date: 结束日期 (YYYY-MM-DD)...
    出现 4 次
  - 重复代码: start_date: 开始日期 (YYYYMMDD)...
    出现 4 次
  - 重复代码: end_date: 结束日期 (YYYYMMDD)...
    出现 4 次
  - 重复代码: """), {'factor_name': factor_name})...
    出现 5 次
  - 重复代码: factor_name=row.factor_name,...
    出现 4 次
  - 重复代码: 'feature_id': feature_id,...
    出现 4 次
  - 重复代码: {'extend_existing': True}...
    出现 6 次
  - 重复代码: def primary_key(self):...
    出现 5 次
  - 重复代码: with sqlite3.connect(self.db_path) as conn:...
    出现 9 次
  - 重复代码: severity=AlertSeverity.WARNING,...
    出现 4 次
  - 重复代码: for metric in metrics:...
    出现 6 次
  - 重复代码: engine = get_alert_engine()...
    出现 8 次
  - 重复代码: key_metrics = ['cpu_usage', 'memory_usage', 'disk_...
    出现 4 次
  - 重复代码: for metric in key_metrics:...
    出现 4 次
  - 重复代码: self.timestamp = datetime.now()...
    出现 5 次
  - 重复代码: async def collect(self) -> List[HealthMetric]:...
    出现 6 次
  - 重复代码: metrics.append(self._create_metric(...
    出现 26 次
  - 重复代码: id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,...
    出现 6 次
  - 重复代码: timestamp TIMESTAMP NOT NULL,...
    出现 4 次
  - 重复代码: id INTEGER PRIMARY KEY AUTOINCREMENT,...
    出现 5 次
  - 重复代码: table_name="stock_data",...
    出现 5 次
  - 重复代码: table_name=rule.table_name,...
    出现 12 次
  - 重复代码: column_name=rule.column_name,...
    出现 10 次
  - 重复代码: dimension=rule.dimension,...
    出现 12 次
  - 重复代码: check_type=rule.check_type,...
    出现 12 次
  - 重复代码: return QualityResult(...
    出现 11 次
  - 重复代码: score=min(100, score),...
    出现 4 次
  - 重复代码: "total_count": total_count,...
    出现 4 次
  - 重复代码: params = rule.parameters or {}...
    出现 4 次
  - 重复代码: def handle_event(self, event: SyncEvent) -> None:...
    出现 6 次
  - 重复代码: def get_notification_type(self) -> NotificationTyp...
    出现 4 次
  - 重复代码: record.status = NotificationStatus.FAILED...
    出现 6 次
  - 重复代码: record.error_message = str(e)...
    出现 4 次
  - 重复代码: end_time = time.time()...
    出现 4 次
  - 重复代码: priority, start_time, end_time, duration, progress...
    出现 5 次
  - 重复代码: records_processed, records_failed, error_message,...
    出现 5 次
  - 重复代码: retry_count, max_retries, created_at, updated_at...
    出现 5 次
  - 重复代码: FROM sync_task_status...
    出现 12 次
  - 重复代码: 'progress': progress,...
    出现 4 次
  - 重复代码: 'records_processed': records_processed,...
    出现 4 次
  - 重复代码: 'records_failed': records_failed...
    出现 4 次
  - 重复代码: 'data_source': task_info.data_source,...
    出现 4 次
  - 重复代码: 'data_type': task_info.data_type,...
    出现 4 次
  - 重复代码: 'target_date': task_info.target_date,...
    出现 4 次
  - 重复代码: 'duration': task_info.duration,...
    出现 4 次
  - 重复代码: 'records_processed': task_info.records_processed,...
    出现 4 次
  - 重复代码: for task in self.active_tasks.values():...
    出现 4 次
  - 重复代码: # ================================...
    出现 18 次
  - 重复代码: if not self.monitoring_enabled:...
    出现 4 次
  - 重复代码: task_info.updated_at = datetime.now()...
    出现 7 次
  - 重复代码: self._emit_event(event)...
    出现 4 次
  - 重复代码: if task_id in self.active_tasks:...
    出现 7 次
  - 重复代码: task_info = self.active_tasks[task_id]...
    出现 5 次
  - 重复代码: with self.event_lock:...
    出现 4 次
  - 重复代码: if any(keyword in error_msg_lower for keyword in...
    出现 5 次
  - 重复代码: COUNT(CASE WHEN status = 'failed' THEN 1 END) as f...
    出现 6 次
  - 重复代码: WHERE target_date >= :start_date AND target_date <...
    出现 4 次
  - 重复代码: 'avg_duration': float(row[4]) if row[4] else 0.0,...
    出现 5 次
  - 重复代码: await self.manager.send_personal_message(...
    出现 11 次
  - 重复代码: if self.alert_engine:...
    出现 6 次
  - 重复代码: if self.performance_monitor:...
    出现 6 次
  - 重复代码: except asyncio.CancelledError:...
    出现 7 次
  - 重复代码: await asyncio.sleep(60)...
    出现 4 次
  - 重复代码: if not self.alert_engine:...
    出现 6 次
  - 重复代码: raise RuntimeError("告警引擎未初始化")...
    出现 4 次
  - 重复代码: if not self.data_quality_monitor:...
    出现 4 次
  - 重复代码: with self.get_session() as session:...
    出现 13 次
  - 重复代码: results = query.all()...
    出现 6 次
  - 重复代码: data = [row.to_dict() for row in results]...
    出现 4 次
  - 重复代码: from sklearn.ensemble import RandomForestRegressor...
    出现 4 次
  - 重复代码: if len(returns) == 0:...
    出现 6 次
  - 重复代码: periods_per_year: 每年的期间数...
    出现 6 次
  - 重复代码: annualized_return = self.calculate_annualized_retu...
    出现 4 次
  - 重复代码: benchmark_returns: 基准收益率序列...
    出现 6 次
  - 重复代码: if benchmark_returns is None:...
    出现 4 次
  - 重复代码: feature_names: 特征名称列表...
    出现 9 次
  - 重复代码: self.feature_names = feature_names...
    出现 4 次
  - 重复代码: self._initialize_shap_explainer(X)...
    出现 4 次
  - 重复代码: importance_df = pd.DataFrame({...
    出现 5 次
  - 重复代码: 'feature': self.feature_names,...
    出现 5 次
  - 重复代码: }).sort_values('importance', ascending=False)...
    出现 4 次
  - 重复代码: top_features = importance_df.head(top_n)...
    出现 4 次
  - 重复代码: fig, ax = plt.subplots(figsize=figsize)...
    出现 6 次
  - 重复代码: ax.set_yticklabels(top_features['feature'])...
    出现 4 次
  - 重复代码: shap_values = explanation['shap_values']...
    出现 4 次
  - 重复代码: if model_file is not None:...
    出现 4 次
  - 重复代码: f.write(model_file.getbuffer())...
    出现 5 次
  - 重复代码: col1, col2 = st.columns(2)...
    出现 4 次
  - 重复代码: if data_file is not None:...
    出现 4 次
  - 重复代码: df = pd.read_csv(data_file)...
    出现 4 次
  - 重复代码: st.dataframe(df.head())...
    出现 4 次
  - 重复代码: feature_columns = st.multiselect(...
    出现 4 次
  - 重复代码: default=df.columns.tolist()[:5] if len(df.columns)...
    出现 4 次
  - 重复代码: with open(temp_model_path, "wb") as f:...
    出现 4 次
  - 重复代码: model = joblib.load(temp_model_path)...
    出现 4 次
  - 重复代码: explainer = ModelExplainer(model, feature_columns)...
    出现 5 次
  - 重复代码: os.remove(temp_model_path)...
    出现 4 次
  - 重复代码: st.error(f"处理文件失败: {e}")...
    出现 4 次
  - 重复代码: if self.validation_level == ValidationLevel.IGNORE...
    出现 6 次
  - 重复代码: if self.validation_level == ValidationLevel.STRICT...
    出现 13 次
  - 重复代码: self.result.add_error(message)...
    出现 13 次
  - 重复代码: self.result.add_warning(message)...
    出现 14 次
  - 重复代码: with self.get_connection() as conn:...
    出现 4 次
  - 重复代码: handle = pynvml.nvmlDeviceGetHandleByIndex(0)...
    出现 4 次
  - 重复代码: memory_info = pynvml.nvmlDeviceGetMemoryInfo(handl...
    出现 4 次
  - 重复代码: session = get_db_session()...
    出现 4 次
  - 重复代码: report_lines.append("")...
    出现 9 次

总计发现重复: 150
============================================================